/* KotOR JS - A remake of the Odyssey Game Engine that powered KotOR I & II
 */

/* @file
 * The Module class.
 */

class Module {

  constructor(onLoad = null){
    this.scripts = {};
    this.archives = [];
    this.effects = [];
    this.eventQueue = [];
    this.area = new ModuleArea();
    this.timeManager = new ModuleTimeManager();

    this.initProperties();

    this.customTokens = new Map();
  }

  update(delta){
    if(this.area){
      this.area.update(delta);
    }
  }

  initProperties(){
    this.Expansion_Pack;
    this.Mod_Area_list = [];
    this.Mod_Creator_ID = 2; //UNUSED always set to 2
    this.Mod_CutSceneList = [];
    this.Mod_DawnHour;
    this.Mod_Description = new CExoLocString();
    this.Mod_DuskHour;
    this.Mod_Entry_Area;
    this.Mod_Entry_Dir_X;
    this.Mod_Entry_Dir_Y;
    this.Mod_Entry_X;
    this.Mod_Entry_Y;
    this.Mod_Entry_Z;

    this.Mod_Expan_List = [];
    this.Mod_GVar_List = [];

    this.Mod_Hak;
    this.Mod_ID = Buffer.alloc(16);
    this.Mod_IsSaveGame = 0;
    this.Mod_Name = new CExoLocString();

    this.Mod_NextCharId0 = 0; // DWORD Keeps track of which id to give the next character created
    this.Mod_NextCharId1 = 0; // DWORD -
    this.Mod_NextObjId0  = 0; // DWORD Keeps track of which id to give the next object created
    this.Mod_NextObjId1  = 0; // DWORD -


    this.scripts = {
      Mod_OnAcquirItem: '',
      Mod_OnActvtItem: '',
      Mod_OnClientEntr: '',
      Mod_OnClientLeav: '',
      Mod_OnHeartbeat: '',
      Mod_OnModLoad: '',
      Mod_OnModStart: '',
      Mod_OnPlrDeath: '',
      Mod_OnPlrDying: '',
      Mod_OnPlrLvlUp: '',
      Mod_OnPlrRest: '',
      Mod_OnSpawnBtnDn: '',
      Mod_OnUnAqreItem: '',
      Mod_OnUsrDefined: '',
    };

    this.Mod_Tag;
    this.Mod_VO_ID = '';
    this.Mod_Version;
    this.Mod_XPScale;
  }

  setFromIFO( ifo = undefined, isLoadingSave = false ){
    if(ifo instanceof GFFObject){
      this.ifo = ifo;

      //Setup Module Calendar
      this.timeManager.setFromIFO(ifo);
      
      let Mod_Area_list = ifo.GetFieldByLabel('Mod_Area_list');
      let Mod_Area_listLen = Mod_Area_list.GetChildStructs().length;
      let Mod_Area = Mod_Area_list.ChildStructs[0];

      this.Area_Name = ifo.GetFieldByLabel('Area_Name', Mod_Area.GetFields()).GetValue();

      this.Mod_Area_list = [];
      //KOTOR modules should only ever have one area. But just incase lets loop through the list
      for(let i = 0; i < Mod_Area_listLen; i++){
        let Mod_Area = Mod_Area_list.ChildStructs[0];
        let area = {};

        if(Mod_Area.HasField('Area_Name'))
          area.Area_Name = Mod_Area.GetFieldByLabel('Area_Name').GetValue()

        if(Mod_Area.HasField('ObjectId'))
          area.ObjectId = Mod_Area.GetFieldByLabel('ObjectId').GetValue()

        this.Mod_Area_list.push(area);
      }

      //LISTS
      if(ifo.RootNode.HasField('Expansion_Pack')){
        this.Expansion_Pack = ifo.GetFieldByLabel('Expansion_Pack').GetValue();
      }else{
        this.Expansion_Pack = 0;
      }

      this.Mod_CutSceneList = [];
      this.Mod_Expan_List = [];
      this.Mod_GVar_List = [];

      this.Mod_Creator_ID = ifo.GetFieldByLabel('Mod_Creator_ID').GetValue();
      this.Mod_Description = ifo.GetFieldByLabel('Mod_Description').GetCExoLocString();

      this.Mod_Entry_Area = ifo.GetFieldByLabel('Mod_Entry_Area').GetValue();
      this.Mod_Entry_Dir_X = ifo.GetFieldByLabel('Mod_Entry_Dir_X').GetValue();
      this.Mod_Entry_Dir_Y = ifo.GetFieldByLabel('Mod_Entry_Dir_Y').GetValue();
      this.Mod_Entry_X = ifo.GetFieldByLabel('Mod_Entry_X').GetValue();
      this.Mod_Entry_Y = ifo.GetFieldByLabel('Mod_Entry_Y').GetValue();
      this.Mod_Entry_Z = ifo.GetFieldByLabel('Mod_Entry_Z').GetValue();

      this.Mod_Hak = ifo.GetFieldByLabel('Mod_Hak').GetValue();
      this.Mod_ID = ifo.GetFieldByLabel('Mod_ID').GetVoid(); //Generated by the toolset (Not sure if it is used in game)
      this.Mod_Name = ifo.GetFieldByLabel('Mod_Name').GetCExoLocString();

      //Mod_Tokens
      if(ifo.RootNode.HasField('Mod_Tokens') && isLoadingSave){
        let tokenList = ifo.GetFieldByLabel('Mod_Tokens').GetChildStructs();
        for(let i = 0, len = tokenList.length; i < len; i++){
          this.setCustomToken(
            tokenList[i].GetFieldByLabel('Mod_TokensNumber').GetValue(),
            tokenList[i].GetFieldByLabel('Mod_TokensValue').GetValue()
          );
        }
      }

      if(ifo.RootNode.HasField('Mod_PlayerList') && isLoadingSave){
        let playerList = ifo.GetFieldByLabel('Mod_PlayerList').GetChildStructs();
        if(playerList.length){
          PartyManager.Player = GFFObject.FromStruct(playerList[0]);
        }
      }

      //Scripts
      this.scripts.onAcquirItem = ifo.GetFieldByLabel('Mod_OnAcquirItem').GetValue();
      this.scripts.onActvItem = ifo.GetFieldByLabel('Mod_OnActvtItem').GetValue();
      this.scripts.onClientEntr = ifo.GetFieldByLabel('Mod_OnClientEntr').GetValue();
      this.scripts.onClientLeav = ifo.GetFieldByLabel('Mod_OnClientLeav').GetValue();
      this.scripts.onHeartbeat = ifo.GetFieldByLabel('Mod_OnHeartbeat').GetValue();
      this.scripts.onModLoad = ifo.GetFieldByLabel('Mod_OnModLoad').GetValue();
      this.scripts.onModStart = ifo.GetFieldByLabel('Mod_OnModStart').GetValue();
      this.scripts.onPlrDeath = ifo.GetFieldByLabel('Mod_OnPlrDeath').GetValue();
      this.scripts.onPlrDying = ifo.GetFieldByLabel('Mod_OnPlrDying').GetValue();
      this.scripts.onPlrLvlUp = ifo.GetFieldByLabel('Mod_OnPlrLvlUp').GetValue();
      this.scripts.onPlrRest = ifo.GetFieldByLabel('Mod_OnPlrRest').GetValue();
      this.scripts.onSpawnBtnDn = ifo.GetFieldByLabel('Mod_OnSpawnBtnDn').GetValue();
      this.scripts.onUnAqreItem = ifo.GetFieldByLabel('Mod_OnUnAqreItem').GetValue();
      this.scripts.onUsrDefined = ifo.GetFieldByLabel('Mod_OnUsrDefined').GetValue();

      if(ifo.RootNode.HasField('Mod_StartMovie')){
        this.Mod_StartMovie = ifo.GetFieldByLabel('Mod_StartMovie').GetValue();
      }else{
        this.Mod_StartMovie = '';
      }

      this.Mod_Tag = ifo.GetFieldByLabel('Mod_Tag').GetValue();

      if(ifo.RootNode.HasField('Mod_VO_ID')){
        this.Mod_VO_ID = ifo.GetFieldByLabel('Mod_VO_ID').GetValue();
      }

      this.Mod_Version = ifo.GetFieldByLabel('Mod_Version').GetValue();
      this.Mod_XPScale = ifo.GetFieldByLabel('Mod_XPScale').GetValue();

      if(ifo.RootNode.HasField('Mod_NextCharId0'))
        this.Mod_NextCharId0 = ifo.GetFieldByLabel('Mod_NextCharId0').GetValue();

      if(ifo.RootNode.HasField('Mod_NextCharId1'))
        this.Mod_NextCharId1 = ifo.GetFieldByLabel('Mod_NextCharId1').GetValue();

      if(ifo.RootNode.HasField('Mod_NextObjId0'))
        this.Mod_NextObjId0 = ifo.GetFieldByLabel('Mod_NextObjId0').GetValue();

      if(ifo.RootNode.HasField('Mod_NextObjId1'))
        this.Mod_NextObjId1 = ifo.GetFieldByLabel('Mod_NextObjId1').GetValue();

    }
  }

  addEffect(effect = undefined, lLocation = undefined){
    if(effect instanceof GameEffect){
      let object = {
        model: new THREE.Object3D(),
        position: lLocation.position,
        dispose: function(){
          this.onRemove();
          this.removeEffect(this);
        },
        removeEffect: function(effect){
          let index = Game.module.effects.indexOf(effect);
          if(index >= 0){
            Game.module.effects.splice(index, 1);
          }
        }
      };

      object.audioEmitter = new AudioEmitter({
        engine: Game.audioEngine,
        props: object,
        template: {
          sounds: [],
          isActive: true,
          isLooping: false,
          isRandom: false,
          isRandomPosition: false,
          interval: 0,
          intervalVariation: 0,
          maxDistance: 50,
          volume: 127,
          positional: 1
        },
        onLoad: () => {
        },
        onError: () => {
        }
      });
      Game.audioEngine.AddEmitter(object.audioEmitter);
      object.audioEmitter.SetPosition(lLocation.position.x, lLocation.position.y, lLocation.position.z);

      object.model.position.copy(lLocation.position);

      effect.setCreator(object);
      effect.setAttachedObject(this);
      effect.onApply(object);
      this.effects.push(effect);

      Game.group.effects.add(object.model);
    }
  }

  tick(delta = 0){

    if(this.readyToProcessEvents){
      
      CombatEngine.Update(delta);

      //Process EventQueue
      let eqLen = this.eventQueue.length - 1;
      for(let i = eqLen; i >= 0; i--){
        let event = this.eventQueue[i];
        
        if( this.timeManager.pauseDay >= event.day && this.timeManager.pauseTime >= event.time ){
          event.execute();
          this.eventQueue.splice(i, 1);
        }
      }

      //Process EffectList
      let elLen = this.effects.length - 1;
      for(let i = elLen; i >= 0; i--){
        this.effects[i].update(delta);
      }

      if(this.area){
        this.area.update(delta);
      }

      this.timeManager.update(delta);

    }

  }

  tickPaused(delta = 0){
    if(this.area){
      this.area.updatePaused(delta);
    }
  }

  setReturnStrRef(enabled = false, str1 = -1, str2 = -1){
    Game.MenuMap.BTN_RETURN.setText(Global.kotorTLK.GetStringById(str1));
  }

  loadScene( onLoad = null, onProgress = null ){

    PartyManager.party = [];
    
    ModuleObject.ResetPlayerId();

    if(this.area.SunFogOn && this.area.SunFogColor){
      Game.globalLight.color.setHex('0x'+this.area.SunFogColor.toString(16));
    }else{
      Game.globalLight.color.setHex('0x'+this.area.DynAmbientColor.toString(16));
    }
    
    Game.globalLight.color.setRGB(
      THREE.Math.clamp(Game.globalLight.color.r, 0.2, 1),
      THREE.Math.clamp(Game.globalLight.color.g, 0.2, 1),
      THREE.Math.clamp(Game.globalLight.color.b, 0.2, 1),
    );

    Game.camera.position.setX(this['Mod_Entry_X']);
    Game.camera.position.setY(this['Mod_Entry_Y']);
    Game.camera.position.setZ(this['Mod_Entry_Z'] + 2);
    Game.camera.rotation.set(Math.PI / 2, -Math.atan2(this['Mod_Entry_Dir_X'], this['Mod_Entry_Dir_Y']), 0);

    //this.camera.pitch = THREE.Math.radToDeg(this.camera.rotation.y) * -1;
    //this.camera.yaw = THREE.Math.radToDeg(this.camera.rotation.x);

    let ypr = this.toEulerianAngle(Game.camera.quaternion);

    Game.camera.pitch = THREE.Math.radToDeg(ypr.pitch);
    Game.camera.yaw = THREE.Math.radToDeg(ypr.yaw) * -1;

    if (Game.camera.pitch > 89.0)
      Game.camera.pitch = 89.0;
    if (Game.camera.pitch < -89.0)
      Game.camera.pitch = -89.0;

    for(let i = 0, len = this.area.cameras.length; i < len; i++){
      let cam = this.area.cameras[i];
      cam.InitProperties();
      let camera = new THREE.PerspectiveCamera(cam.fov, $(window).innerWidth() / $(window).innerHeight(), 0.1, 1500);
      camera.up = new THREE.Vector3( 0, 1, 0 );
      camera.position.set(cam.position.x, cam.position.y, cam.position.z + cam.height);
      camera.rotation.reorder('YZX');
      let quat = new THREE.Quaternion().copy(cam.orientation);
      let rot = quat.multiplyVector3(new THREE.Vector3(1, 1, 0));
      camera.rotation.x = THREE.Math.degToRad(cam.pitch);
      camera.rotation.z = -Math.atan2(cam.orientation.w, -cam.orientation.x)*2;

      //Clipping hack
      camera.position.add(new THREE.Vector3(0, 0, 0.5).applyEuler(camera.rotation));

      camera.ingameID = cam.cameraID;
      Game.staticCameras.push(camera);

      camera._cam = cam;
    }

    Game.LoadScreen.setProgress(0);

    try{
      Game.InGameOverlay.SetMapTexture('lbl_map'+this.Mod_Entry_Area);
      Game.MenuMap.SetMapTexture('lbl_map'+this.Mod_Entry_Area);
    }catch(e){

    }

    this.area.loadScene( () => {
      if(typeof onLoad === 'function')
        onLoad();

      this.transWP = null;
    });

  }

  initScripts(onComplete = null){

    let initScripts = [];

    if(this.scripts.onModLoad != ''){
      initScripts.push('onModLoad');
    }
    
    if(this.scripts.onClientEntr != ''){
      initScripts.push('onClientEntr');
    }

    let keys = Object.keys(this.scripts);
    let loop = new AsyncLoop({
      array: initScripts,
      onLoop: async (key, asyncLoop) => {
        let _script = this.scripts[key];
        if(_script != '' && !(_script instanceof NWScriptInstance)){
          //let script = await NWScript.Load(_script);
          this.scripts[key] = await NWScript.Load(_script);
          if(this.scripts[key] instanceof NWScriptInstance){
            //this.scripts[key].name = _script;
            this.scripts[key].enteringObject = Game.player;
            this.scripts[key].run(Game.module.area, 0, () => {
              asyncLoop.next();
            });
          }else{
            console.error('Module failed to load script', _script, key);
            asyncLoop.next();
          }
        }else{
          asyncLoop.next();
        }
      }
    });
    loop.iterate(() => {
      if(typeof onComplete === 'function')
        onComplete();
    });
    
  }

  getCameraStyle(){
    return Global.kotor2DA["camerastyle"].rows[this.area.CameraStyle];
  }

  setCustomToken(tokenNumber = 0, tokenValue = ''){
    this.customTokens.set(tokenNumber, tokenValue);
  }

  getCustomToken(tokenNumber){
    return this.customTokens.get(tokenNumber) || `<Missing CustomToken ${tokenNumber}>`;
  }

  initEventQueue(){
    //Load module EventQueue after the area is intialized so that ModuleObject ID's are set
    if(this.ifo.RootNode.HasField('EventQueue')){
      let eventQueue = this.ifo.GetFieldByLabel('EventQueue').GetChildStructs();
      for(let i = 0; i < eventQueue.length; i++){
        let event_struct = eventQueue[i];
        let event = GameEvent.EventFromStruct(event_struct);
        console.log(event_struct, event);
        if(event instanceof GameEvent){
          this.eventQueue.push(event);
        }
      }
    }
  }

  dispose(){
    Game.collisionList = [];
    
    //Remove all effects
    if(Game.module){
      while(Game.module.effects.length){
        Game.module.effects[0].dispose();
        Game.module.effects.shift();
      }
    }

    //Cleanup texture cache ignoring GUI & LBL textures
    Object.keys(TextureLoader.textures).forEach( (key) => {

      if(key.substr(0, 3) == 'lbl' || key.substr(0, 3) == 'gui')
        return;

      TextureLoader.textures[key].dispose();
      delete TextureLoader.textures[key]; 

    });

    //Clear walkmesh list
    while (Game.walkmeshList.length){
      let wlkmesh = Game.walkmeshList.shift();
      //wlkmesh.dispose();
      Game.group.room_walkmeshes.remove(wlkmesh);
      Game.octree_walkmesh.remove(wlkmesh);
    }

    Game.octree_walkmesh.rebuild();

    if(Game.module instanceof Module){

      if(Game.player instanceof ModuleObject){
        Game.player.destroy();
        Game.player = undefined;
      }

      //Clear emitters
      while (Game.group.emitters.children.length){
        Game.group.emitters.remove(Game.group.emitters.children[0]);
      }
      
      if(this.area){
        this.area.dispose();
      }

    }

    Game.module = undefined;

  }

  save( isSaveGame = false ){

    return new Promise( async (resolve, reject ) => {

      PartyManager.Save();

      let ifo = new GFFObject();
      ifo.FileType = 'IFO ';

      ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Creature List') );
      let eventQueue = ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'EventQueue') );
      for(let i = 0; i < this.eventQueue.length; i++){
        
        let event = this.eventQueue[i];
        if(event instanceof GameEvent){
          eventQueue.AddChildStruct( event.export() );
        }

      }

      let areaList = ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_Area_list') );
      for(let i = 0; i < this.Mod_Area_list.length; i++){
        areaList.AddChildStruct( this.Mod_Area_list[i].saveAreaListStruct() );
        this.Mod_Area_list[i].save();
      }

      ifo.RootNode.AddField( new Field(GFFDataTypes.INT, 'Mod_Creator_ID') ).SetValue(this.Mod_Creator_ID);
      ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_CutSceneList') );
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_DawnHour') ).SetValue(this.timeManager.dawnHour);
      ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOLOCSTRING, 'Mod_Description') ).SetValue( this.Mod_Description );
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_DuskHour') ).SetValue(this.timeManager.duskHour);
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD64, 'Mod_Effect_NxtId') ).SetValue(this.Mod_Effect_NxtId);
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_Entry_Area') ).SetValue(this.Mod_Entry_Area);
      ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Dir_X') ).SetValue(this.Mod_Entry_Dir_X);
      ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Dir_Y') ).SetValue(this.Mod_Entry_Dir_Y);
      ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_X') ).SetValue(this.Mod_Entry_X);
      ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Y') ).SetValue(this.Mod_Entry_Y);
      ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Z') ).SetValue(this.Mod_Entry_Z);
      ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_Expan_List') );
      ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOSTRING, 'Mod_Hak') ).SetValue(this.Mod_Hak);
      ifo.RootNode.AddField( new Field(GFFDataTypes.VOID, 'Mod_ID') );
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_IsNWMFile') ).SetValue(0);
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_IsSaveGame') ).SetValue( isSaveGame ? 1 : 0);
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_MinPerHour') ).SetValue(this.timeManager.minutesPerHour);
      ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOLOCSTRING, 'Mod_Name') ).SetValue( this.Mod_Name );
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_NextCharId0') ).SetValue(this.Mod_NextCharId0);
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_NextCharId1') ).SetValue(this.Mod_NextCharId1);
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_NextObjId0') ).SetValue(this.Mod_NextObjId0);
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_NextObjId1') ).SetValue(this.Mod_NextObjId1);
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnAcquirItem') ).SetValue(this.scripts.onAcquirItem ? this.scripts.onAcquirItem.name : '');
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnActvtItem') ).SetValue(this.scripts.onActvItem ? this.scripts.onActvItem.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnClientEntr') ).SetValue(this.scripts.onClientEntr ? this.scripts.onClientEntr.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnClientLeav') ).SetValue(this.scripts.onClientLeav ? this.scripts.onClientLeav.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnHeartbeat') ).SetValue(this.scripts.onHeartbeat ? this.scripts.onHeartbeat.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnModLoad') ).SetValue(this.scripts.onModLoad ? this.scripts.onModLoad.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnModStart') ).SetValue(this.scripts.onModStart ? this.scripts.onModStart.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrDeath') ).SetValue(this.scripts.onPlrDeath ? this.scripts.onPlrDeath.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrDying') ).SetValue(this.scripts.onPlrDying ? this.scripts.onPlrDying.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrLvlUp') ).SetValue(this.scripts.onPlrLvlUp ? this.scripts.onPlrLvlUp.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrRest') ).SetValue(this.scripts.onPlrRest ? this.scripts.onPlrRest.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnSpawnBtnDn') ).SetValue(this.scripts.onSpawnBtnDn ? this.scripts.onSpawnBtnDn.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnUnAqreItem') ).SetValue(this.scripts.onUnAqreItem ? this.scripts.onUnAqreItem.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnUsrDefined') ).SetValue(this.scripts.onUsrDefined ? this.scripts.onUsrDefined.name : '');;
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_PauseDay') ).SetValue(this.timeManager.pauseDay);
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_PauseTime') ).SetValue(this.timeManager.pauseTime);

      //Player
      let playerList = ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_PlayerList') );
      if(Game.player instanceof ModulePlayer){
        playerList.AddChildStruct( Game.player.save().RootNode );
      }

      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_StartDay') ).SetValue(this.timeManager.day);
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_StartHour') ).SetValue(this.timeManager.hour);
      ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Mod_StartMiliSec') ).SetValue(this.timeManager.milisecond);
      ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Mod_StartMinute') ).SetValue(this.timeManager.minute);
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_StartMonth') ).SetValue(this.timeManager.month);
      ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Mod_StartSecond') ).SetValue(this.timeManager.second);
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_StartYear') ).SetValue(this.timeManager.year);
      ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOSTRING, 'Mod_Tag') ).SetValue(this.Mod_Tag);
      ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_Tokens') );
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_Transition') ).SetValue(this.Mod_Transition);
      ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_Version') ).SetValue(this.Mod_Version);
      ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_XPScale') .SetValue(this.Mod_XPScale));
      ifo.RootNode.AddField( new Field(GFFDataTypes.STRUCT, 'SWVarTable') );
      ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'VarTable') );
      
      this.ifo = ifo;

      let sav = new ERFObject();

      sav.addResource('module', ResourceTypes['ifo'], this.ifo.GetExportBuffer());
      for(let i = 0; i < this.Mod_Area_list.length; i++){
        let area = this.Mod_Area_list[i];
        sav.addResource(area._name, ResourceTypes['are'], area.are.GetExportBuffer());
        sav.addResource(area._name, ResourceTypes['git'], area.git.GetExportBuffer());
      }

      await sav.export( path.join(CurrentGame.gameinprogress_dir, this.filename+'.sav') );
      
      console.log('Current Module Exported', this.filename);

      await InventoryManager.Save();

      await PartyManager.ExportPartyMemberTemplates();

      await FactionManager.Export( path.join(CurrentGame.gameinprogress_dir, 'repute.fac') );

      resolve();

    });

  }

  static async GetModuleMod(modName = ''){
    return new Promise( (resolve, reject) => {
      let resource_path = path.join(app_profile.directory, 'modules', modName+'.mod');
      new ERFObject(path.join(app_profile.directory, 'modules', modName+'.mod'), (mod) => {
        console.log('Module.GetModuleMod success', resource_path);
        resolve(mod);
      }, () => {
        console.error('Module.GetModuleMod failed', resource_path);
        resolve(undefined);
      });
    });
  }

  static async GetModuleRimA(modName = ''){
    return new Promise( (resolve, reject) => {
      let resource_path = path.join(app_profile.directory, 'modules', modName+'.rim');
      new RIMObject(path.join(app_profile.directory, 'modules', modName+'.rim'), (rim) => {
        resolve(rim);
      }, () => {
        console.error('Module.GetModuleRimA failed', resource_path);
        resolve(undefined);
      });
    });
  }

  static async GetModuleRimB(modName = ''){
    return new Promise( (resolve, reject) => {
      let resource_path = path.join(app_profile.directory, 'modules', modName+'_s.rim');
      new RIMObject(path.join(app_profile.directory, 'modules', modName+'_s.rim'), (rim) => {
        resolve(rim);
      }, () => {
        console.error('Module.GetModuleRimB failed', resource_path);
        resolve(undefined);
      });
    });
  }

  static async GetModuleLipsLoc(){
    return new Promise( (resolve, reject) => {
      let resource_path = path.join(app_profile.directory, 'lips', 'localization.mod');
      new ERFObject(path.join(app_profile.directory, 'lips', 'localization.mod'), (mod) => {
        console.log('Module.GetModuleLipsLoc success', resource_path);
        resolve(mod);
      }, () => {
        console.error('Module.GetModuleLipsLoc failed', resource_path);
        resolve(undefined);
      });
    });
  }

  static async GetModuleLips(modName = ''){
    return new Promise( (resolve, reject) => {
      let resource_path = path.join(app_profile.directory, 'lips', modName+'_loc.mod');
      new ERFObject(path.join(app_profile.directory, 'lips', modName+'_loc.mod'), (mod) => {
        resolve(mod);
      }, () => {
        console.error('Module.GetModuleLips failed', resource_path);
        resolve(undefined);
      });
    });
  }

  static async GetModuleDLG(modName = ''){
    return new Promise( (resolve, reject) => {
      let resource_path = path.join(app_profile.directory, 'modules', modName+'_dlg.erf');
      new ERFObject(resource_path, (mod) => {
        resolve(mod);
      }, () => {
        console.error('Module.GetModuleDLG failed', resource_path);
        resolve(undefined);
      });
    });
  }

  static async GetModuleArchives(modName = ''){
    return new Promise( async (resolve, reject) => {
      let archives = [];
      let archive = undefined;

      let isModuleSaved = await CurrentGame.IsModuleSaved(modName);

      try{
        if(isModuleSaved){
          archive = await CurrentGame.GetModuleRim(modName);
          if(archive instanceof ERFObject){
            archives.push(archive);
          }

          //Locate the module's MOD file
          archive = await Module.GetModuleMod(modName);
          if(archive instanceof ERFObject){
            archives.push(archive);
          }

          //Locate the module's RIM_S file
          archive = await Module.GetModuleRimB(modName);
          if(archive instanceof RIMObject){
            archives.push(archive);
          }
        }else{
          //Locate the module's MOD file
          archive = await Module.GetModuleMod(modName);
          if(archive instanceof ERFObject){
            archives.push(archive);
          }

          //Locate the module's RIM file
          archive = await Module.GetModuleRimA(modName);
          if(archive instanceof RIMObject){
            archives.push(archive);
          }

          //Locate the module's RIM_S file
          archive = await Module.GetModuleRimB(modName);
          if(archive instanceof RIMObject){
            archives.push(archive);
          }
        }

        //Locate the module's LIPs file
        archive = await Module.GetModuleLips(modName);
        if(archive instanceof ERFObject){
          archives.push(archive);
        }

        //Locate the global LIPs file
        archive = await Module.GetModuleLipsLoc(modName);
        if(archive instanceof ERFObject){
          archives.push(archive);
        }

        //Locate the module's dialog MOD file (TSL)
        archive = await Module.GetModuleDLG(modName);
        if(archive instanceof ERFObject){
          archives.push(archive);
        }
      }catch(e){
        console.error(e);
      }
      
      //Return the archive array
      resolve(archives);
    });
  }

  static async GetModuleProjectArchives(modName = ''){
    return new Promise( async (resolve, reject) => {
      let archives = [];
      let archive = undefined;

      try{
        //Locate the module's RIM file
        archive = await Module.GetModuleRimA(modName);
        if(archive instanceof RIMObject){
          archives.push(archive);
        }

        //Locate the module's RIM_S file
        archive = await Module.GetModuleRimB(modName);
        if(archive instanceof RIMObject){
          archives.push(archive);
        }

        //Locate the module's dialog MOD file (TSL)
        archive = await Module.GetModuleDLG(modName);
        if(archive instanceof ERFObject){
          archives.push(archive);
        }
      }catch(e){
        console.error(e);
      }
      
      //Return the archive array
      resolve(archives);
    });
  }

  //ex: end_m01aa end_m01aa_s
  static BuildFromExisting(modName = null, waypoint = null, onComplete = null){
    console.log('BuildFromExisting', modName);
    let module = new Module();
    module.filename = modName;
    module.transWP = waypoint;
    Game.module = module;
    if(modName != null){
      try{
        Module.GetModuleArchives(modName).then( (archives) => {
          // console.log('archives', archives);
          Game.module.archives = archives;

          ResourceLoader.loadResource(ResourceTypes['ifo'], 'module', (ifo_data) => {
            
            new GFFObject(ifo_data, (ifo, rootNode) => {

              Game.module.setFromIFO(ifo, Game.isLoadingSave);
              Game.time = Game.module.timeManager.pauseTime / 1000;

              ResourceLoader.loadResource(ResourceTypes['git'], module.Mod_Entry_Area, (data) => {
                new GFFObject(data, (git, rootNode) => {
                  ResourceLoader.loadResource(ResourceTypes['are'], module.Mod_Entry_Area, (data) => {
                    new GFFObject(data, (are, rootNode) => {
                      module.area = new ModuleArea(module.Mod_Entry_Area, are, git);
                      module.Mod_Area_list = [module.area];
                      module.area.module = module;
                      module.area.SetTransitionWaypoint(module.transWP);
                      module.area.Load( () => {

                        if(module.Mod_NextObjId0)
                          ModuleObject.COUNT = module.Mod_NextObjId0;

                        if(typeof onComplete == 'function')
                          onComplete(module);
                      });                        
                    });
                  });
                });
              });
            });
          }, (err) => {
            console.error('LoadModule', err);
            Game.module = undefined;
          });
        });
      }catch(e){
        console.error('LoadModule', e);
        Game.module = undefined;
      }
    }
    return module;
  }

  //This should only be used inside KotOR Forge
  static FromProject(directory = null, onComplete = null){
    console.log('BuildFromExisting', directory);
    let module = new Module();
    module.transWP = null;
    Game.module = module;
    if(directory != null){

      fs.readFile(path.join(directory, 'module.ifo'), (err, ifo_data) => {
        new GFFObject(ifo_data, (ifo) => {
          //console.log('Module.FromProject', 'IFO', ifo);
          try{
            Game.module.setFromIFO(ifo);
            Game.time = Game.module.Mod_PauseTime / 1000;

            fs.readFile(path.join(directory, module.Mod_Entry_Area+'.git'), (err, data) => {
              new GFFObject(data, (git) => {
                //console.log('Module.FromProject', 'GIT', git);
                fs.readFile(path.join(directory, module.Mod_Entry_Area+'.are'), (err, data) => {
                  new GFFObject(data, (are) => {
                    //console.log('Module.FromProject', 'ARE', are);
                    module.area = new ModuleArea(module.Mod_Entry_Area, are, git);
                    module.area.module = module;
                    module.Mod_Area_list = [module.area];
                    module.area.SetTransitionWaypoint(module.transWP);
                    module.area.Load( () => {
                      if(typeof onComplete == 'function')
                        onComplete(module);
                    });                        
                  });
                });
              });
            });
          }catch(e){
            console.error(e);
          }
        });
      });
      
    }
    return module;
  }

  toEulerianAngle(q){
  	let ysqr = q.y * q.y;

  	// roll (x-axis rotation)
  	let t0 = +2.0 * (q.w * q.x + q.y * q.z);
  	let t1 = +1.0 - 2.0 * (q.x * q.x + ysqr);
  	let roll = Math.atan2(t0, t1);

  	// pitch (y-axis rotation)
  	let t2 = +2.0 * (q.w * q.y - q.z * q.x);
  	t2 = t2 > 1.0 ? 1.0 : t2;
  	t2 = t2 < -1.0 ? -1.0 : t2;
  	let pitch = Math.asin(t2);

  	// yaw (z-axis rotation)
  	let t3 = +2.0 * (q.w * q.z + q.x *q.y);
  	let t4 = +1.0 - 2.0 * (ysqr + q.z * q.z);
  	let yaw = Math.atan2(t3, t4);

    return {yaw: yaw, pitch: pitch, roll: roll};
  }

  Save(){

    //Export .ifo

    //Export .are

    //Export .git

    return {
      are: null,
      git: null,
      ifo: null
    };

  }

  static FromJSON(path){
    let module = new Module();
    if(path != null){
      let json = JSON.parse(fs.readFileSync(path, 'utf8'));

      module = Object.assign(new Module(), json);

      //module.area = new ModuleArea();
      module.area = Object.assign(new ModuleArea(), json.area);

    }else{
      this.path = Global.Project.directory;
    }
    return module;
  }

  toolsetExportIFO(){
    let ifo = new GFFObject();
    ifo.FileType = 'IFO ';

    ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Expansion_Pack', this.Expansion_Pack) );
    let areaList = ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_Area_list') );

    //KotOR only supports one Area per module
    if(this.area instanceof ModuleArea){
      let areaStruct = new Struct(6);
      areaStruct.AddField( new Field(GFFDataTypes.RESREF, 'Area_Name', this.area._name) );
      areaList.AddChildStruct(areaStruct);
    }

    ifo.RootNode.AddField( new Field(GFFDataTypes.INT, 'Mod_Creator_ID', this.Expansion_Pack) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_CutSceneList') );
    ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_DawnHour', this.timeManager.dawnHour) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOLOCSTRING, 'Mod_Description'), this.Mod_Description );
    ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_DuskHour', this.timeManager.duskHour) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_Entry_Area', this.Mod_Entry_Area) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Dir_X', this.Mod_Entry_Dir_X) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Dir_Y', this.Mod_Entry_Dir_Y) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_X', this.Mod_Entry_X) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Y', this.Mod_Entry_Y) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.FLOAT, 'Mod_Entry_Z', this.Mod_Entry_Z) );

    ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_Expan_List') );
    ifo.RootNode.AddField( new Field(GFFDataTypes.LIST, 'Mod_GVar_List') );

    ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOSTRING, 'Mod_Hak', this.Mod_Hak) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.VOID, 'Mod_ID') ).SetData(this.Mod_ID || Buffer.alloc(16));
    ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_IsSaveGame', 0) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_MinPerHour', this.timeManager.minutesPerHour) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOLOCSTRING, 'Mod_Name'), this.Mod_Name );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnAcquirItem', this.scripts.onAcquirItem) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnActvtItem', this.scripts.onActvItem) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnClientEntr', this.scripts.onClientEntr) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnClientLeav', this.scripts.onClientLeav) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnHeartbeat', this.scripts.onHeartbeat) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnModLoad', this.scripts.onModLoad) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnModStart', this.scripts.onModStart) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrDeath', this.scripts.onPlrDeath) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrDying', this.scripts.onPlrDying) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrLvlUp', this.scripts.onPlrLvlUp) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnPlrRest', this.scripts.onPlrRest) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnSpawnBtnDn', this.scripts.onSpawnBtnDn) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnUnAqreItem', this.scripts.onUnAqreItem) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_OnUsrDefined', this.scripts.onUsrDefined) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Mod_StartDay', this.timeManager.day) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Mod_StartHour', this.timeManager.hour) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Mod_StartMonth', this.timeManager.month) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.RESREF, 'Mod_StartMovie', this.Mod_StartMovie) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.WORD, 'Mod_StartYear', this.timeManager.year) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOSTRING, 'Mod_Tag', this.Mod_Tag) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.CEXOSTRING, 'Mod_VO_ID', this.Mod_VO_ID) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.DWORD, 'Mod_Version', this.Mod_Version) );
    ifo.RootNode.AddField( new Field(GFFDataTypes.BYTE, 'Mod_XPScale', this.Mod_XPScale) );

    return ifo;

  }

}

class ModuleTimeManager {

  //minutesPerHour = 2;
  // pauseDay = 0;
  // pauseTime = 0;
  // year = 0;
  // month = 0;
  // day = 0;
  // hour = 0;
  // minute = 0;
  // second = 0;
  // milisecond = 0;
  dawnHour = 6;
  duskHour = 18;

  enabled = true;

  constructor(){
    this.calendar = new ModuleCalendar();

    //24 = days in a month
    //12 = months in a year
    //02 = default minutes per hour
  }

  update(delta = 0){
    if(!this.enabled) return;
    this.calendar.advanceDeltaTime(delta);
  }

  getCalendarTimeFromPauseTime( calendar = new ModuleCalendar ){
    calendar.hour       = this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND / ModuleCalendar.SECONDS_IN_MINUTE / this.minutesPerHour | 0;
    calendar.minute     = this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND / ModuleCalendar.SECONDS_IN_MINUTE % this.minutesPerHour | 0;
    calendar.second     = this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND % ModuleCalendar.SECONDS_IN_MINUTE | 0;
    calendar.milisecond = this.pauseTime % ModuleCalendar.MILISECONDS_IN_SECOND | 0;
    return calendar;
  }

  getCalendarDateFromPauseDay( calendar = new ModuleCalendar ){
    calendar.year   = this.pauseDay / ModuleCalendar.DAYS_IN_MONTH / ModuleCalendar.MONTHS_IN_YEAR | 0;
    calendar.month  = this.pauseDay / ModuleCalendar.DAYS_IN_MONTH % ModuleCalendar.MONTHS_IN_YEAR + 1 | 0;
    calendar.day    = this.pauseDay % ModuleCalendar.DAYS_IN_MONTH + 1 | 0;
    return calendar;
  }

  setMinutesPerHour(mph){
    this.minutesPerHour = mph | 0;
  }

  getHoursFromPauseTime(){
    return this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND / ModuleCalendar.SECONDS_IN_MINUTE / this.minutesPerHour | 0;
  }

  getMinutesFromPauseTime(){
    return this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND / ModuleCalendar.SECONDS_IN_MINUTE % this.minutesPerHour | 0;
  }

  getSecondsFromPauseTime(){
    return this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND % ModuleCalendar.SECONDS_IN_MINUTE | 0;
  }

  getMilisecondsFromPauseTime(){
    return this.pauseTime % ModuleCalendar.MILISECONDS_IN_SECOND | 0;
  }

  getFutureTimeFromSeconds(seconds){
    console.log('getFutureTimeFromSeconds', seconds);
    let future = this.calendar.clone();
    future.advanceDeltaTime(seconds);
    console.log('getFutureTimeFromSeconds.future', (future.pauseTime - this.pauseTime), (future.pauseTime - this.pauseTime) / 1000 );
    return future;
  }

  toString(){
    return `${('0000'+this.year).slice(-4)}-${('00'+this.month).slice(-2)}-${('00'+this.day).slice(-2)} ${('00'+this.hour).slice(-2)}:${('00'+this.minute).slice(-2)}:${('00'+this.second).slice(-2)}.${('0000'+this.milisecond).slice(-4)}`;
  }

  setFromIFO(ifo){
    if(ifo instanceof GFFObject){
      if(ifo.RootNode.HasField('Mod_PauseDay')){
        this.pauseDay = ifo.GetFieldByLabel('Mod_PauseDay').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_PauseTime')){
        this.pauseTime = ifo.GetFieldByLabel('Mod_PauseTime').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_DawnHour')){
        this.dawnHour = ifo.GetFieldByLabel('Mod_DawnHour').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_DuskHour')){
        this.duskHour = ifo.GetFieldByLabel('Mod_DuskHour').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_MinPerHour')){
        this.minutesPerHour = ifo.GetFieldByLabel('Mod_MinPerHour').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_StartYear')){
        this.year = ifo.GetFieldByLabel('Mod_StartYear').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_StartMonth')){
        this.month = ifo.GetFieldByLabel('Mod_StartMonth').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_StartDay')){
        this.day = ifo.GetFieldByLabel('Mod_StartDay').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_StartHour')){
        this.hour = ifo.GetFieldByLabel('Mod_StartHour').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_StartMinute')){
        this.minute = ifo.GetFieldByLabel('Mod_StartMinute').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_StartSecond')){
        this.second = ifo.GetFieldByLabel('Mod_StartSecond').GetValue();
      }

      if(ifo.RootNode.HasField('Mod_StartMiliSec')){
        this.milisecond = ifo.GetFieldByLabel('Mod_StartMiliSec').GetValue();
      }
    }
  }

  get MAX_DAY_TIME(){
    return ModuleCalendar.HOURS_IN_DAY * (ModuleCalendar.SECONDS_IN_MINUTE * this.minutesPerHour) * ModuleCalendar.MILISECONDS_IN_SECOND;
  }

  get milisecond(){
    return this.calendar.milisecond;
  }

  set milisecond(milisecond = 0){
    this.calendar.milisecond = milisecond|0;
  }

  get second(){
    return this.calendar.second;
  }

  set second(second = 0){
    this.calendar.second = second|0;
  }

  get minute(){
    return this.calendar.minute;
  }

  set minute(minute = 0){
    this.calendar.minute = minute|0;
  }

  get hour(){
    return this.calendar.hour;
  }

  set hour(hour = 0){
    this.calendar.hour = hour|0;
  }

  get day(){
    return this.calendar.day;
  }

  set day(day = 0){
    this.calendar.day = day|0;
  }

  get month(){
    return this.calendar.month;
  }

  set month(month = 0){
    this.calendar.month = month|0;
  }

  get year(){
    return this.calendar.year;
  }

  set year(year = 0){
    this.calendar.year = year|0;
  }

  get pauseTime(){
    return this.calendar.pauseTime|0;
  }

  set pauseTime(pauseTime = 0){
    this.calendar.pauseTime = pauseTime|0;
  }

  get pauseDay(){
    return this.calendar.pauseDay|0;
  }

  set pauseDay(pauseDay = 0){
    this.calendar.pauseDay = pauseDay|0;
  }

  get minutesPerHour(){
    return this.calendar.minutesPerHour;
  }

  set minutesPerHour(minutesPerHour = 0){
    this.calendar.minutesPerHour = minutesPerHour|0;
  }

}

class ModuleCalendar {
  minutesPerHour = 2;
  year = 0;
  month = 0;
  day = 0;
  hour = 0;
  minute = 0;
  second = 0;
  milisecond = 0;
  pauseDay = 0;
  pauseTime = 0;

  clone(){
    let calendar = new ModuleCalendar();
    calendar.year = this.year;
    calendar.month = this.month;
    calendar.day = this.day;
    calendar.hour = this.hour;
    calendar.minute = this.minute;
    calendar.second = this.second;
    calendar.milisecond = this.milisecond;
    calendar.pauseDay = this.pauseDay;
    calendar.pauseTime = this.pauseTime;
    calendar.minutesPerHour = this.minutesPerHour;
    return calendar;
  }

  advanceDeltaTime(delta = 0){
    this.advanceDayAndTime(0, ( ModuleCalendar.MILISECONDS_IN_SECOND * delta ) | 0);
  }

  advanceDayAndTime(day = 0, milliseconds = 0){
    let time = this.pauseTime + (milliseconds | 0);
    if ( time >= this.MAX_DAY_TIME ) {
      this.pauseDay++;
      time -= this.MAX_DAY_TIME;
    }
    this.pauseTime = time;

    this.milisecond = this.getMilisecondsFromPauseTime();
    this.second = this.getSecondsFromPauseTime();
    this.minute = this.getMinutesFromPauseTime();
    this.hour = this.getHoursFromPauseTime();

    this.pauseDay += day;
    this.day = this.getDayFromPauseDay();
    this.month = this.getMonthFromPauseDay();
    this.year = this.getYearFromPauseDay();

    //this.pauseTime  = (this.hour * 120000) + (this.minute * 60000) + (this.second * 1000) + this.milisecond;
    //this.pauseDay   = (this.year * ModuleCalendar.MONTHS_IN_YEAR * ModuleCalendar.DAYS_IN_MONTH ) + ( (this.month - 1) * ModuleCalendar.DAYS_IN_MONTH) + (this.day - 1);
  }

  pauseTimeFromCalendar(){
    return  ( this.hour * this.minutesPerHour * ModuleCalendar.SECONDS_IN_MINUTE * ModuleCalendar.MILISECONDS_IN_SECOND ) + 
            ( this.minute * ModuleCalendar.SECONDS_IN_MINUTE * ModuleCalendar.MILISECONDS_IN_SECOND ) + 
            ( this.second * ModuleCalendar.MILISECONDS_IN_SECOND ) + this.milisecond;
  }

  pauseDayFromCalendar(){
    return  ( this.year * ModuleCalendar.MONTHS_IN_YEAR * ModuleCalendar.DAYS_IN_MONTH ) + 
            ( ( this.month - 1 ) * ModuleCalendar.DAYS_IN_MONTH) + 
            ( this.day - 1 );
  }

  updateCalendarDateTime(){
    //Update calendar time
    this.milisecond = this.getMilisecondsFromPauseTime();
    this.second = this.getSecondsFromPauseTime();
    this.minute = this.getMinutesFromPauseTime();
    this.hour = this.getHoursFromPauseTime();

    //Update calendar day/month/year
    this.day = this.getDayFromPauseDay();
    this.month = this.getMonthFromPauseDay();
    this.year = this.getYearFromPauseDay();
  }
  
  getHoursFromPauseTime(){
    return this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND / ModuleCalendar.SECONDS_IN_MINUTE / this.minutesPerHour | 0;
  }

  getMinutesFromPauseTime(){
    return this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND / ModuleCalendar.SECONDS_IN_MINUTE % this.minutesPerHour | 0;
  }

  getSecondsFromPauseTime(){
    return this.pauseTime / ModuleCalendar.MILISECONDS_IN_SECOND % ModuleCalendar.SECONDS_IN_MINUTE | 0;
  }

  getMilisecondsFromPauseTime(){
    return this.pauseTime % ModuleCalendar.MILISECONDS_IN_SECOND | 0;
  }

  getDayFromPauseDay(){
    return (this.pauseDay % ModuleCalendar.DAYS_IN_MONTH + 1) | 0;
  }

  getMonthFromPauseDay(){
    return (this.pauseDay / ModuleCalendar.DAYS_IN_MONTH % ModuleCalendar.MONTHS_IN_YEAR + 1) | 0;
  }

  getYearFromPauseDay(){
    return (this.pauseDay / ModuleCalendar.DAYS_IN_MONTH / ModuleCalendar.MONTHS_IN_YEAR) | 0;
  }

  get MAX_DAY_TIME(){
    return ModuleCalendar.HOURS_IN_DAY * (ModuleCalendar.SECONDS_IN_MINUTE * this.minutesPerHour) * ModuleCalendar.MILISECONDS_IN_SECOND;
  }

  static get MILISECONDS_IN_SECOND() {
    return 1000;
  }

  static get SECONDS_IN_MINUTE() {
    return 60;
  }

  static get HOURS_IN_DAY() {
    return 24;
  }

  static get DAYS_IN_MONTH() {
    return 28;
  }

  static get MONTHS_IN_YEAR() {
    return 12;
  }

}

module.exports = Module;
